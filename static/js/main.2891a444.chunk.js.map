{"version":3,"sources":["logic/formulas.ts","logic/Operation.ts","logic/Calculator.ts","CalcUi/actions.ts","CalcUi/CalcKey.tsx","CalcUi/reducer.ts","CalcUi/index.tsx","Main/index.tsx","index.tsx"],"names":["FormulaType","TransformationType","ActionType","Operation","config","input","a","b","base","this","get","SUM","set","SUBTRACT","subtract","MULTIPLY","multiply","DIVIDE","divide","NOOP","Error","Record","undefined","type","result","Calculator","safeInput","currentOperation","lastOperation","last","Number","join","toString","getLastResult","op","update","ops","push","outputSafe","finalBase","finalInput","reOperation","perform","pushOperation","clearInput","outputLastResult","delete","lastActionType","OPERATION","TRANSFORMATION","completeOperation","userInput","length","test","includes","replace","chars","concat","split","slice","MAX_CHARACTERS","parseInput","INPUT","outputRaw","transform","getLastValue","lastValue","hasCurrentOperation","PLUSMINUS","PERCENT","percent","closeAndOpenOp","applyCurrentOp","reApplyPrevOp","operations","List","rawInput","output","CalcActionType","KeyType","addOperation","createAction","ADD_OPERATION","addInput","UPDATE_INPUT","clearAll","CLEAR_ALL","calculate","CALCULATE","applyTransform","APPLY_TRANSFORM","reducer","createReducer","handleType","state","action","payload","updateInput","clear","calculateResult","CalcKey","text","onClick","className","classNames","TRANSFORM","CalcUI","useReducer","calc","dispatch","Main","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2891a444.chunk.js","sourcesContent":["export type Formula = (a: number, b: number) => number;\nexport type Transform = (a: number) => number;\n\nexport const sum: Formula = (a: number, b: number) => {\n  return a + b;\n};\n\nexport const subtract: Formula = (a: number, b: number) => {\n  return a - b;\n};\n\nexport const divide: Formula = (a: number, b: number) => {\n  return a / b;\n};\n\nexport const multiply: Formula = (a: number, b: number) => {\n  return a * b;\n};\n\nexport const percent: Formula = (a: number, b: number) => {\n  return (a * b) / 100;\n};\n\nexport const plusMinus: Transform = (a: number) => {\n  return a * -1;\n};\n\nexport enum FormulaType {\n  NOOP = 'CALCULATOR/FORMULA/NOOP',\n  SUM = 'CALCULATOR/FORMULA/SUM',\n  SUBTRACT = 'CALCULATOR/FORMULA/SUBTRACT',\n  MULTIPLY = 'CALCULATOR/FORMULA/MULTIPLY',\n  DIVIDE = 'CALCULATOR/FORMULA/DIVIDE',\n}\n\nexport enum TransformationType {\n  PLUSMINUS = 'CALCULATOR/FORMULA/PLUSMINUS',\n  PERCENT = 'CALCULATOR/FORMULA/PERCENT',\n}\n","import { Record } from 'immutable';\nimport { FormulaType, sum, subtract, multiply, divide } from './formulas';\n\ninterface IOperation {\n  input?: number;\n  base: number;\n  type: FormulaType;\n  result?: number;\n}\n\nconst DefaultOperation = Record<IOperation>({\n  input: undefined,\n  base: 0,\n  type: FormulaType.NOOP,\n  result: undefined,\n});\n\nexport class Operation extends DefaultOperation {\n  public constructor(config?: Partial<IOperation>) {\n    super(config);\n  }\n\n  public perform(input: number): Operation {\n    const base = this.get('base');\n\n    switch (this.get('type')) {\n      case FormulaType.SUM:\n        return this.set('result', sum(base, input)).set('input', input);\n      case FormulaType.SUBTRACT:\n        return this.set('result', subtract(base, input)).set('input', input);\n      case FormulaType.MULTIPLY:\n        return this.set('result', multiply(base, input)).set('input', input);\n      case FormulaType.DIVIDE:\n        return this.set('result', divide(base, input)).set('input', input);\n      case FormulaType.NOOP:\n        return this.set('result', base).set('input', input);\n      default:\n        throw new Error('Unknown operation');\n    }\n  }\n}\n","import { Record, List } from 'immutable';\nimport {\n  FormulaType,\n  percent,\n  plusMinus,\n  TransformationType,\n} from './formulas';\nimport { Operation } from './Operation';\n\nenum ActionType {\n  OPERATION,\n  TRANSFORMATION,\n  INPUT,\n}\n\ninterface ICalculator {\n  readonly lastActionType: ActionType | null;\n  readonly operations: List<Operation>;\n  readonly currentOperation: Operation | null;\n  readonly rawInput: List<string>;\n  readonly safeInput: number | null;\n  readonly output: string;\n}\n\nconst DefaultCalculator = Record<ICalculator>({\n  lastActionType: null,\n  operations: List<Operation>(),\n  currentOperation: null,\n  rawInput: List<string>(),\n  safeInput: null,\n  output: '0',\n});\n\nexport default class Calculator extends DefaultCalculator {\n  public static readonly MAX_CHARACTERS = 22;\n\n  private hasCurrentOperation(): boolean {\n    return this.get('currentOperation') !== null;\n  }\n\n  private getLastValue(): number {\n    const safeInput = this.get('safeInput');\n    const currentOperation = this.get('currentOperation');\n    const lastOperation = this.get('operations').last(null);\n\n    if (safeInput !== null) {\n      return safeInput;\n    } else if (currentOperation) {\n      return currentOperation.get('base');\n    } else if (lastOperation) {\n      return lastOperation.get<number>('result', 0);\n    }\n\n    return 0;\n  }\n\n  private getLastResult(): number {\n    return this.get('operations').last<Operation>().get<number>('result', 0);\n  }\n\n  private parseInput(): Calculator {\n    return this.set('safeInput', Number(this.get('rawInput').join('')));\n  }\n\n  private outputRaw(): Calculator {\n    return this.set('output', this.get('rawInput').join(''));\n  }\n\n  private outputSafe(): Calculator {\n    return this.set('output', this.get<number>('safeInput', 0).toString());\n  }\n\n  private outputLastResult(): Calculator {\n    return this.set('output', this.getLastResult().toString());\n  }\n\n  private pushOperation(op: Operation): Calculator {\n    return this.update('operations', (ops) => ops.push(op));\n  }\n\n  private reApplyPrevOp(): Calculator {\n    const lastOperation = this.get('operations').last<Operation>();\n\n    if (lastOperation === undefined) {\n      return this.outputSafe();\n    }\n\n    const safeInput = this.get('safeInput');\n\n    const finalBase: number =\n      safeInput === null\n        ? lastOperation.get<number>('result', 0)\n        : lastOperation.get<number>('input', 0);\n    const finalInput: number =\n      safeInput === null ? lastOperation.get<number>('input', 0) : safeInput;\n\n    const reOperation = lastOperation\n      .set('base', finalBase)\n      .perform(finalInput);\n\n    return this.pushOperation(reOperation).clearInput().outputLastResult();\n  }\n\n  private applyCurrentOp(): Calculator {\n    const currentOperation = this.get('currentOperation');\n    const safeInput = this.get<number>('safeInput', 0);\n\n    if (!currentOperation) {\n      throw new Error('There is no open Operation');\n    }\n\n    return this.pushOperation(currentOperation.perform(safeInput))\n      .delete('currentOperation')\n      .clearInput()\n      .outputLastResult();\n  }\n\n  private closeAndOpenOp(base: number, type: FormulaType): Calculator {\n    const lastActionType = this.get('lastActionType');\n    const currentOperation = this.get('currentOperation');\n\n    if (!currentOperation) {\n      throw new Error('There is no open Operation');\n    }\n\n    if (\n      lastActionType === ActionType.OPERATION ||\n      lastActionType === ActionType.TRANSFORMATION\n    ) {\n      return this.set('currentOperation', currentOperation.set('type', type));\n    }\n\n    const completeOperation = currentOperation.perform(base);\n\n    return this.pushOperation(completeOperation).set(\n      'currentOperation',\n      new Operation({ base: completeOperation.get('result'), type })\n    );\n  }\n\n  public updateInput(userInput: string): Calculator {\n    if (!userInput.length || !/[\\d.]/.test(userInput)) {\n      throw new Error(`Illegal input character: ${userInput}`);\n    }\n\n    if (/[.]/.test(userInput) && this.get('rawInput').includes('.')) {\n      userInput = userInput.replace('.', '');\n    }\n\n    return this.update('rawInput', (chars) =>\n      chars.concat(userInput.split('')).slice(Calculator.MAX_CHARACTERS * -1)\n    )\n      .parseInput()\n      .set('lastActionType', ActionType.INPUT)\n      .outputRaw();\n  }\n\n  public applyTransform(transform: TransformationType): Calculator {\n    const input = this.getLastValue();\n\n    const lastValue = this.hasCurrentOperation()\n      ? this.get('currentOperation')!.get('base')\n      : input;\n\n    switch (transform) {\n      case TransformationType.PLUSMINUS:\n        return this.set('safeInput', plusMinus(input))\n          .set('lastActionType', ActionType.TRANSFORMATION)\n          .outputSafe();\n      case TransformationType.PERCENT:\n        return this.set('safeInput', percent(lastValue, input)).set(\n          'lastActionType',\n          ActionType.TRANSFORMATION\n        );\n      default:\n        throw new Error('Unknown transformation');\n    }\n  }\n\n  public addOperation(type: FormulaType): Calculator {\n    const base = this.getLastValue();\n\n    return this.hasCurrentOperation()\n      ? this.closeAndOpenOp(base, type)\n          .clearInput()\n          .set('lastActionType', ActionType.OPERATION)\n      : this.set('currentOperation', new Operation({ base, type }))\n          .clearInput()\n          .set('lastActionType', ActionType.OPERATION);\n  }\n\n  public calculateResult(): Calculator {\n    return this.hasCurrentOperation()\n      ? this.applyCurrentOp()\n      : this.reApplyPrevOp();\n  }\n\n  public clearInput(): Calculator {\n    return this.delete('safeInput').delete('rawInput');\n  }\n}\n","import { createAction } from 'typesafe-actions';\nimport { FormulaType, TransformationType } from '../logic/formulas';\n\nexport enum CalcActionType {\n  ADD_OPERATION = 'CALCULATOR/ACTION/ADD_OPERATION',\n  APPLY_TRANSFORM = 'CALCULATOR/ACTION/APPLY_TRANSFORM',\n  UPDATE_INPUT = 'CALCULATOR/ACTION/UPDATE_INPUT',\n  CLEAR_ALL = 'CALCULATOR/ACTION/CLEAR_ALL',\n  CALCULATE = 'CALCULATOR/ACTION/CALCULATE',\n}\n\nexport const addOperation = createAction(CalcActionType.ADD_OPERATION)<\n  FormulaType\n>();\nexport const addInput = createAction(CalcActionType.UPDATE_INPUT)<string>();\nexport const clearAll = createAction(CalcActionType.CLEAR_ALL)();\nexport const calculate = createAction(CalcActionType.CALCULATE)();\nexport const applyTransform = createAction(CalcActionType.APPLY_TRANSFORM)<\n  TransformationType\n>();\n","import React from 'react';\nimport classNames from 'classnames';\n\nexport enum KeyType {\n  TRANSFORM = 'CALCULATOR/KEY/TRANSFORM',\n  OPERATION = 'CALCULATOR/KEY/OPERATION',\n  INPUT = 'CALCULATOR/KEY/INPUT',\n}\n\ninterface ICalcKeyProps {\n  type: KeyType;\n  text: string;\n  className?: string;\n  onClick: () => void;\n}\n\nconst CalcKey: React.FunctionComponent<ICalcKeyProps> = ({\n  type,\n  text,\n  onClick,\n  className,\n}) => {\n  return (\n    <button\n      className={classNames(className, 'key', {\n        'key--transform': type === KeyType.TRANSFORM,\n        'key--operation': type === KeyType.OPERATION,\n        'key--input': type === KeyType.INPUT,\n      })}\n      onClick={onClick}\n    >\n      {text}\n    </button>\n  );\n};\n\nexport default CalcKey;\n","import { createReducer, ActionType } from 'typesafe-actions';\nimport Calculator from '../logic/Calculator';\n\nimport * as actions from './actions';\nimport { CalcActionType } from './actions';\n\nexport type CalcAction = ActionType<typeof actions>;\n\nexport const reducer = createReducer<Calculator, CalcAction>(new Calculator())\n  .handleType(CalcActionType.ADD_OPERATION, (state, action) =>\n    state.addOperation(action.payload)\n  )\n  .handleType(CalcActionType.UPDATE_INPUT, (state, action) =>\n    state.updateInput(action.payload)\n  )\n  .handleType(CalcActionType.CLEAR_ALL, (state) => state.clear())\n  .handleType(CalcActionType.APPLY_TRANSFORM, (state, action) =>\n    state.applyTransform(action.payload)\n  )\n  .handleType(CalcActionType.CALCULATE, (state) => state.calculateResult());\n","import React, { useReducer } from 'react';\n\nimport Calculator from '../logic/Calculator';\nimport { reducer } from './reducer';\nimport {\n  addOperation,\n  addInput,\n  clearAll,\n  calculate,\n  applyTransform,\n} from './actions';\nimport CalcKey, { KeyType } from './CalcKey';\nimport { FormulaType, TransformationType } from '../logic/formulas';\n\nimport './CalcUi.css';\n\nconst CalcUI: React.FC = () => {\n  const [calc, dispatch] = useReducer(reducer, new Calculator());\n\n  return (\n    <div className=\"calculator\">\n      <div className=\"screen\">{calc.get('output')}</div>\n      <div className=\"keyboard\">\n        <CalcKey\n          onClick={() => dispatch(clearAll())}\n          type={KeyType.TRANSFORM}\n          text=\"C\"\n        />\n        <CalcKey\n          onClick={() => dispatch(applyTransform(TransformationType.PLUSMINUS))}\n          type={KeyType.TRANSFORM}\n          text=\"+/-\"\n        />\n        <CalcKey\n          onClick={() => dispatch(applyTransform(TransformationType.PERCENT))}\n          type={KeyType.TRANSFORM}\n          text=\"%\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addOperation(FormulaType.DIVIDE))}\n          type={KeyType.OPERATION}\n          text=\"/\"\n        />\n\n        <CalcKey\n          onClick={() => dispatch(addInput('7'))}\n          type={KeyType.INPUT}\n          text=\"7\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addInput('8'))}\n          type={KeyType.INPUT}\n          text=\"8\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addInput('9'))}\n          type={KeyType.INPUT}\n          text=\"9\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addOperation(FormulaType.MULTIPLY))}\n          type={KeyType.OPERATION}\n          text=\"X\"\n        />\n\n        <CalcKey\n          onClick={() => dispatch(addInput('4'))}\n          type={KeyType.INPUT}\n          text=\"4\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addInput('5'))}\n          type={KeyType.INPUT}\n          text=\"5\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addInput('6'))}\n          type={KeyType.INPUT}\n          text=\"6\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addOperation(FormulaType.SUBTRACT))}\n          type={KeyType.OPERATION}\n          text=\"-\"\n        />\n\n        <CalcKey\n          onClick={() => dispatch(addInput('1'))}\n          type={KeyType.INPUT}\n          text=\"1\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addInput('2'))}\n          type={KeyType.INPUT}\n          text=\"2\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addInput('3'))}\n          type={KeyType.INPUT}\n          text=\"3\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addOperation(FormulaType.SUM))}\n          type={KeyType.OPERATION}\n          text=\"+\"\n        />\n\n        <CalcKey\n          className=\"key--zero\"\n          onClick={() => dispatch(addInput('0'))}\n          type={KeyType.INPUT}\n          text=\"0\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addInput('.'))}\n          type={KeyType.INPUT}\n          text=\".\"\n        />\n        <CalcKey\n          onClick={() => dispatch(calculate())}\n          type={KeyType.OPERATION}\n          text=\"=\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default CalcUI;\n","import React from 'react';\nimport CalcUI from '../CalcUi';\n\nimport './main.css';\n\nconst Main: React.FC = () => {\n  return (\n    <div id=\"calc-container\">\n      <CalcUI />\n    </div>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Main from './Main';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\n"],"sourceRoot":""}