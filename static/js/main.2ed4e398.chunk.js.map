{"version":3,"sources":["logic/formulas.ts","logic/Operation.ts","CalcUi/actions.ts","logic/Calculator.ts","CalcUi/CalcKey.tsx","CalcUi/reducer.ts","CalcUi/index.tsx","Main/index.tsx","index.tsx"],"names":["FormulaType","TransformationType","CalcActionType","Operation","config","input","a","b","base","this","get","SUM","set","SUBTRACT","subtract","MULTIPLY","multiply","DIVIDE","divide","NOOP","Error","Record","undefined","type","result","Calculator","safeInput","currentOperation","lastOperation","last","Number","join","toString","getLastResult","op","update","ops","push","outputSafe","finalBase","finalInput","reOperation","perform","pushOperation","clearInput","outputLastResult","delete","completeOperation","userInput","length","test","includes","replace","chars","concat","split","parseInput","outputRaw","transform","getLastRelevantBase","PLUSMINUS","PERCENT","percent","closeAndOpenOp","applyCurrentOp","reApplyPrevOp","operations","List","rawInput","output","KeyType","addOperation","createAction","ADD_OPERATION","addInput","UPDATE_INPUT","clearAll","CLEAR_ALL","calculate","CALCULATE","applyTransform","APPLY_TRANSFORM","reducer","createReducer","handleType","state","action","payload","updateInput","clear","calculateResult","CalcKey","text","onClick","className","classNames","key","TRANSFORM","OPERATION","INPUT","CalcUI","useReducer","calc","dispatch","Main","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ed4e398.chunk.js","sourcesContent":["export type Formula = (a: number, b: number) => number;\nexport type Transform = (a: number) => number;\n\nexport const sum: Formula = (a: number, b: number) => {\n  return a + b;\n};\n\nexport const subtract: Formula = (a: number, b: number) => {\n  return a - b;\n};\n\nexport const divide: Formula = (a: number, b: number) => {\n  return a / b;\n};\n\nexport const multiply: Formula = (a: number, b: number) => {\n  return a * b;\n};\n\nexport const percent: Formula = (a: number, b: number) => {\n  return (a * b) / 100;\n};\n\nexport const plusMinus: Transform = (a: number) => {\n  return a * -1;\n};\n\nexport enum FormulaType {\n  NOOP = 'CALCULATOR/FORMULA/NOOP',\n  SUM = 'CALCULATOR/FORMULA/SUM',\n  SUBTRACT = 'CALCULATOR/FORMULA/SUBTRACT',\n  MULTIPLY = 'CALCULATOR/FORMULA/MULTIPLY',\n  DIVIDE = 'CALCULATOR/FORMULA/DIVIDE',\n  // PERCENT = 'CALCULATOR/FORMULA/PERCENT',\n}\n\nexport enum TransformationType {\n  PLUSMINUS = 'CALCULATOR/FORMULA/PLUSMINUS',\n  PERCENT = 'CALCULATOR/FORMULA/PERCENT',\n}\n","import { Record } from 'immutable';\nimport { FormulaType, sum, subtract, multiply, divide } from './formulas';\n\ninterface IOperation {\n  input?: number;\n  base: number;\n  type: FormulaType;\n  result?: number;\n}\n\nconst DefaultOperation = Record<IOperation>({\n  input: undefined,\n  base: 0,\n  type: FormulaType.NOOP,\n  result: undefined,\n});\n\nexport class Operation extends DefaultOperation {\n  public constructor(config?: Partial<IOperation>) {\n    super(config);\n  }\n\n  public perform(input: number): Operation {\n    const base = this.get('base');\n\n    switch (this.get('type')) {\n      case FormulaType.SUM:\n        return this.set('result', sum(base, input)).set('input', input);\n      case FormulaType.SUBTRACT:\n        return this.set('result', subtract(base, input)).set('input', input);\n      case FormulaType.MULTIPLY:\n        return this.set('result', multiply(base, input)).set('input', input);\n      case FormulaType.DIVIDE:\n        return this.set('result', divide(base, input)).set('input', input);\n      case FormulaType.NOOP:\n        return this.set('result', this.get('base')).set('input', input);\n      default:\n        throw new Error('Unknown operation');\n    }\n  }\n}\n","import { createAction } from 'typesafe-actions';\nimport { FormulaType, TransformationType } from '../logic/formulas';\n\nexport enum CalcActionType {\n  ADD_OPERATION = 'CALCULATOR/ACTION/ADD_OPERATION',\n  APPLY_TRANSFORM = 'CALCULATOR/ACTION/APPLY_TRANSFORM',\n  UPDATE_INPUT = 'CALCULATOR/ACTION/UPDATE_INPUT',\n  CLEAR_ALL = 'CALCULATOR/ACTION/CLEAR_ALL',\n  CALCULATE = 'CALCULATOR/ACTION/CALCULATE',\n}\n\nexport const addOperation = createAction(CalcActionType.ADD_OPERATION)<\n  FormulaType\n>();\nexport const addInput = createAction(CalcActionType.UPDATE_INPUT)<string>();\nexport const clearAll = createAction(CalcActionType.CLEAR_ALL)();\nexport const calculate = createAction(CalcActionType.CALCULATE)();\nexport const applyTransform = createAction(CalcActionType.APPLY_TRANSFORM)<\n  TransformationType\n>();\n","import { Record, List } from 'immutable';\nimport {\n  FormulaType,\n  percent,\n  plusMinus,\n  TransformationType,\n} from './formulas';\nimport { Operation } from './Operation';\n\ninterface ICalculator {\n  operations: List<Operation>;\n  currentOperation: Operation | null;\n  rawInput: List<string>;\n  safeInput: number | null;\n  output: string;\n}\n\nconst DefaultCalculator = Record<ICalculator>({\n  operations: List<Operation>(),\n  currentOperation: null,\n  rawInput: List<string>(),\n  safeInput: null,\n  output: '0',\n});\n\nexport default class Calculator extends DefaultCalculator {\n  private getLastRelevantBase(): number {\n    const safeInput = this.get('safeInput');\n    const currentOperation = this.get('currentOperation');\n    const lastOperation = this.get('operations').last(null);\n    return safeInput !== null\n      ? safeInput\n      : currentOperation\n      ? currentOperation.get('base')\n      : lastOperation\n      ? lastOperation.get('result')!\n      : 0;\n  }\n  private getLastResult(): number {\n    return this.get('operations').last<Operation>().get<number>('result', 0);\n  }\n\n  private parseInput(): Calculator {\n    return this.set('safeInput', Number(this.get('rawInput').join('')));\n  }\n\n  private outputRaw(): Calculator {\n    return this.set('output', this.get('rawInput').join(''));\n  }\n\n  private outputSafe(): Calculator {\n    return this.set('output', this.get<number>('safeInput', 0).toString());\n  }\n\n  private outputLastResult(): Calculator {\n    return this.set('output', this.getLastResult().toString());\n  }\n\n  private pushOperation(op: Operation): Calculator {\n    return this.update('operations', (ops) => ops.push(op));\n  }\n\n  private reApplyPrevOp(): Calculator {\n    const lastOperation = this.get('operations').last<Operation>();\n\n    if (lastOperation === undefined) {\n      return this.outputSafe();\n    }\n\n    const safeInput = this.get('safeInput');\n\n    const finalBase: number =\n      safeInput === null\n        ? lastOperation.get<number>('result', 0)\n        : lastOperation.get<number>('input', 0);\n    const finalInput: number =\n      safeInput === null ? lastOperation.get<number>('input', 0) : safeInput;\n\n    const reOperation = lastOperation\n      .set('base', finalBase)\n      .perform(finalInput);\n\n    return this.pushOperation(reOperation).clearInput().outputLastResult();\n  }\n\n  private applyCurrentOp(): Calculator {\n    const currentOperation = this.get('currentOperation');\n    const safeInput = this.get('safeInput');\n\n    if (!currentOperation || safeInput === null) {\n      throw new Error('There is no open Operation');\n    }\n\n    return this.pushOperation(currentOperation.perform(safeInput))\n      .delete('currentOperation')\n      .clearInput()\n      .outputLastResult();\n  }\n\n  private closeAndOpenOp(base: number, type: FormulaType): Calculator {\n    const currentOperation = this.get('currentOperation');\n\n    if (!currentOperation) {\n      throw new Error('There is no open Operation');\n    }\n\n    const completeOperation = currentOperation.perform(base);\n\n    return this.pushOperation(completeOperation).set(\n      'currentOperation',\n      new Operation({ base: completeOperation.get('result'), type })\n    );\n  }\n\n  public updateInput(userInput: string): Calculator {\n    if (!userInput.length || !/[\\d.]/.test(userInput)) {\n      throw new Error(`Illegal input character: ${userInput}`);\n    }\n\n    if (/[.]/.test(userInput) && this.get('rawInput').includes('.')) {\n      userInput = userInput.replace('.', '');\n    }\n\n    return this.update('rawInput', (chars) => chars.concat(userInput.split('')))\n      .parseInput()\n      .outputRaw();\n  }\n\n  public applyTransform(transform: TransformationType): Calculator {\n    const currentOperation = this.get('currentOperation');\n    const input = this.getLastRelevantBase();\n\n    const base = currentOperation ? currentOperation.get('base') : input;\n\n    switch (transform) {\n      case TransformationType.PLUSMINUS:\n        return this.set('safeInput', plusMinus(input)).outputSafe();\n      case TransformationType.PERCENT:\n        return this.set('safeInput', percent(base, input));\n      default:\n        throw new Error('Unknown transformation');\n    }\n  }\n\n  public addOperation(type: FormulaType): Calculator {\n    const currentOperation = this.get('currentOperation');\n    const base = this.getLastRelevantBase();\n\n    return currentOperation\n      ? this.closeAndOpenOp(base, type).clearInput()\n      : this.set(\n          'currentOperation',\n          new Operation({ base, type })\n        ).clearInput();\n  }\n\n  public calculateResult(): Calculator {\n    const currentOperation = this.get('currentOperation');\n\n    return currentOperation ? this.applyCurrentOp() : this.reApplyPrevOp();\n  }\n\n  public clearInput(): Calculator {\n    return this.delete('safeInput').delete('rawInput');\n  }\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\nexport enum KeyType {\n  TRANSFORM = 'CALCULATOR/KEY/TRANSFORM',\n  OPERATION = 'CALCULATOR/KEY/OPERATION',\n  INPUT = 'CALCULATOR/KEY/INPUT',\n}\n\ntype CalcKeyProps = {\n  type: KeyType;\n  text: string;\n  className?: string;\n  onClick: () => void;\n};\n\nconst CalcKey: React.FC<CalcKeyProps> = ({\n  type,\n  text,\n  onClick,\n  className,\n}: CalcKeyProps) => {\n  return (\n    <button\n      className={classNames(className, {\n        key: true,\n        'key--transform': type === KeyType.TRANSFORM,\n        'key--operation': type === KeyType.OPERATION,\n        'key--input': type === KeyType.INPUT,\n      })}\n      onClick={onClick}\n    >\n      {text}\n    </button>\n  );\n};\n\nexport default CalcKey;\n","import { createReducer, ActionType } from 'typesafe-actions';\nimport Calculator from '../logic/Calculator';\n\nimport * as actions from './actions';\nimport { CalcActionType } from './actions';\n\nexport type CalcAction = ActionType<typeof actions>;\n\nexport const reducer = createReducer<Calculator, CalcAction>(new Calculator())\n  .handleType(CalcActionType.ADD_OPERATION, (state, action) =>\n    state.addOperation(action.payload)\n  )\n  .handleType(CalcActionType.UPDATE_INPUT, (state, action) =>\n    state.updateInput(action.payload)\n  )\n  .handleType(CalcActionType.CLEAR_ALL, (state) => state.clear())\n  .handleType(CalcActionType.APPLY_TRANSFORM, (state, action) =>\n    state.applyTransform(action.payload)\n  )\n  .handleType(CalcActionType.CALCULATE, (state) => state.calculateResult());\n","import React, { useReducer } from 'react';\n\nimport Calculator from '../logic/Calculator';\nimport { reducer } from './reducer';\nimport {\n  addOperation,\n  addInput,\n  clearAll,\n  calculate,\n  applyTransform,\n} from './actions';\nimport CalcKey, { KeyType } from './CalcKey';\nimport { FormulaType, TransformationType } from '../logic/formulas';\n\nimport './CalcUi.css';\n\nconst CalcUI: React.FC = () => {\n  const [calc, dispatch] = useReducer(reducer, new Calculator());\n\n  return (\n    <div className=\"calculator\">\n      <div className=\"screen\">{calc.get('output')}</div>\n      <div className=\"keyboard\">\n        <CalcKey\n          onClick={() => dispatch(clearAll())}\n          type={KeyType.TRANSFORM}\n          text=\"C\"\n        />\n        <CalcKey\n          onClick={() => dispatch(applyTransform(TransformationType.PLUSMINUS))}\n          type={KeyType.TRANSFORM}\n          text=\"+/-\"\n        />\n        <CalcKey\n          onClick={() => dispatch(applyTransform(TransformationType.PERCENT))}\n          type={KeyType.TRANSFORM}\n          text=\"%\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addOperation(FormulaType.DIVIDE))}\n          type={KeyType.OPERATION}\n          text=\"/\"\n        />\n\n        <CalcKey\n          onClick={() => dispatch(addInput('7'))}\n          type={KeyType.INPUT}\n          text=\"7\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addInput('8'))}\n          type={KeyType.INPUT}\n          text=\"8\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addInput('9'))}\n          type={KeyType.INPUT}\n          text=\"9\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addOperation(FormulaType.MULTIPLY))}\n          type={KeyType.OPERATION}\n          text=\"X\"\n        />\n\n        <CalcKey\n          onClick={() => dispatch(addInput('4'))}\n          type={KeyType.INPUT}\n          text=\"4\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addInput('5'))}\n          type={KeyType.INPUT}\n          text=\"5\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addInput('6'))}\n          type={KeyType.INPUT}\n          text=\"6\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addOperation(FormulaType.SUBTRACT))}\n          type={KeyType.OPERATION}\n          text=\"-\"\n        />\n\n        <CalcKey\n          onClick={() => dispatch(addInput('1'))}\n          type={KeyType.INPUT}\n          text=\"1\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addInput('2'))}\n          type={KeyType.INPUT}\n          text=\"2\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addInput('3'))}\n          type={KeyType.INPUT}\n          text=\"3\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addOperation(FormulaType.SUM))}\n          type={KeyType.OPERATION}\n          text=\"+\"\n        />\n\n        <CalcKey\n          className=\"key--zero\"\n          onClick={() => dispatch(addInput('0'))}\n          type={KeyType.INPUT}\n          text=\"0\"\n        />\n        <CalcKey\n          onClick={() => dispatch(addInput('.'))}\n          type={KeyType.INPUT}\n          text=\".\"\n        />\n        <CalcKey\n          onClick={() => dispatch(calculate())}\n          type={KeyType.OPERATION}\n          text=\"=\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default CalcUI;\n","import React from 'react';\nimport CalcUI from '../CalcUi';\n\nimport './main.css';\n\nconst Main: React.FC = () => {\n  return (\n    <div id=\"calc-container\">\n      <CalcUI />\n    </div>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Main from './Main';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\n"],"sourceRoot":""}